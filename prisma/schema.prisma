// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Supervisor {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  phone         String         @unique
  googleScholar String
  educational   Educational[]
  students      User[]
  Conversation  Conversation[]
}

model Verification {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  try            Int      @default(0)
  code           String
  lastResendTime DateTime
}

model Educational {
  id           Int         @id @default(autoincrement())
  title        String
  level        String
  university   String
  Supervisor   Supervisor? @relation(fields: [supervisorId], references: [id])
  supervisorId Int?
}

model Form {
  id             Int           @id @default(autoincrement())
  title          String
  body           String?
  file           String?
  Seminar        Seminar?      @relation(fields: [seminarId], references: [id])
  seminarId      Int?
  Dissertation   Dissertation? @relation(fields: [dissertationId], references: [id])
  dissertationId Int?
}

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String
  field         String?
  studentNumber String?
  grade         Grade          @default(master)
  nationalCode  String         @unique
  status        Status         @default(studying)
  role          Role           @default(student)
  password      String?
  seminar       Seminar[]
  supervisor    Supervisor[]
  Conversation  Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  Profile       Profile[]
  Dissertation  Dissertation[]
}

enum Grade {
  master
  phd
}

enum Role {
  student
  admin
}

enum Status {
  studying
  graduated
  dismissal
}

model Conversation {
  id           Int                @id @default(autoincrement())
  title        String
  status       ConversationStatus @default(open)
  messages     Messages[]
  student      User?              @relation(fields: [studentId], references: [id], onDelete: SetNull)
  supervisor   Supervisor?        @relation(fields: [supervisorId], references: [id], onDelete: SetNull)
  studentId    Int?
  supervisorId Int?

  createdAt DateTime @default(now())
}

enum ConversationStatus {
  open
  closed
}

model Messages {
  id             Int           @id @default(autoincrement())
  text           String
  file           String?
  sender         Sender
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?
}

enum Sender {
  student
  supervisor
}

model Profile {
  id                Int      @id @default(autoincrement())
  fatherName        String
  marital           Boolean  @default(false)
  BirthDay          DateTime
  address           String
  phone             String
  fieldOfStudy      String
  orientation       String
  enteringYear      Int
  beforeUniversity  String
  dissertationTopic String
  numberOfArticls   Int
  seminarTopic      String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
}

model Seminar {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  listOfArticles String[]
  progress       Int      @default(0)
  forms          Form[]
  User           User?    @relation(fields: [userId], references: [id])
  userId         Int?
}

model Dissertation {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  subject     String?
  student     User    @relation(fields: [userId], references: [id])
  forms       Form[]
  userId      Int
}
